from itertools import permutations
def is_valid_solution(s1, s2, s3, mapping):
    num1 = int(''.join(str(mapping[c]) for c in s1))
    num2 = int(''.join(str(mapping[c]) for c in s2))
    num3 = int(''.join(str(mapping[c]) for c in s3))
    return num1 + num2 == num3
def solve_cryptarithmetic(s1, s2, s3):
    letters = set(s1 + s2 + s3)
    assert len(letters) <= 10, "Too many unique letters!"
    for perm in permutations(range(10), len(letters)):
        mapping = dict(zip(letters, perm))
        if mapping[s1[0]] == 0 or mapping[s2[0]] == 0 or mapping[s3[0]] == 0:
            continue  # Skip leading zero case
        if is_valid_solution(s1, s2, s3, mapping):
            return mapping
    return None
def main():
    s1 = "SEND"
    s2 = "MORE"
    s3 = "MONEY"
    solution = solve_cryptarithmetic(s1, s2, s3)
    if solution:
        print(f"Solution found: {solution}")
        num1 = ''.join(str(solution[c]) for c in s1)
        num2 = ''.join(str(solution[c]) for c in s2)
        num3 = ''.join(str(solution[c]) for c in s3)
        print(f"{s1} + {s2} = {s3}")
        print(f"{num1} + {num2} = {num3}")
    else:
        print("No solution found.")
if __name__ == "__main__":
    main()
